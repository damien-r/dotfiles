[user]
  name = Damien Ragoucy
  email = damien@lambdam.com

[core]
  # autocrlf = input
  # safecrlf = true

[alias]
  co = checkout
  pr = pull --rebase --committer-date-is-author-date
  ci = commit
  st = status
  br = branch
  # reb = rebase --committer-date-is-author-date
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  type = cat-file -t
  dump = cat-file -p
  undo = reset --soft HEAD^
  first-empty-commit = commit --allow-empty -m "Created git project"
  # t for tree
  t = log --graph --decorate --pretty=oneline --abbrev-commit
  tt = log --graph --all --decorate --pretty=oneline --abbrev-commit
  d = diff
  ds = diff --staged
  unstage = reset HEAD --
  fixup = !sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -
  ffixup = !sh -c 'git commit --fixup="$1" && git rebase --interactive --autosquash "$1"~1' -
  squash = !sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -
  ri = rebase --interactive --autosquash # --committer-date-is-author-date
  ap = add --patch
  poule = pull --rebase
  one = "log --color --oneline --decorate"
  ones = "log --color --oneline --decorate --stat"
  dcmp = "!f() { git log --graph --color --decorate --boundary --oneline HEAD...$1; }; f"
  dcmpp = "!f() { git log --graph --color --decorate --boundary --oneline --stat HEAD...$1; }; f"
  d2cmp = "!f() { git log --graph --color --decorate --boundary --oneline $1...$2; }; f"
  d2cmpp = "!f() { git log --graph --color --decorate --boundary --oneline --stat $1...$2; }; f"

[push]
    default = tracking

[diff]
    color = true

[color]
  branch      = auto
  diff        = auto
  status      = auto
  interactive = auto
  ui          = auto
  pager       = true

[color "branch"]
  current = yellow reverse
  local   = yellow
  remote  = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old  = red bold
  new  = green bold

[color "status"]
  added     = yellow
  changed   = green
  untracked = cyan

[branch]
  ; When a new branch is created with git branch or git checkout that tracks
  ; another branch, this variable tells git to set up pull to rebase instead of
  ; merge (see "branch.<name>.rebase"). When never, rebase is never automatically
  ; set to true. When local, rebase is set to true for tracked branches of other
  ; local branches. When remote, rebase is set to true for tracked branches of
  ; remote-tracking branches. When always, rebase will be set to true for all
  ; tracking branches.
  ; autosetuprebase = always

[pull]
  rebase = true

[core]
  excludesfile = ~/.gitignore_global
  whitespace = trailing-space,space-before-tab

[gui]
  fontdiff = -family Monaco -size 13 -weight normal -slant roman -underline 0 -overstrike 0
